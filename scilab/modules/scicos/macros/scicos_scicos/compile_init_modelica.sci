//  Scicos
//
//  Copyright (C) INRIA - METALAU Project <scicos@inria.fr>
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// See the file ../license.txt
//
// Compilation needed by the graphical interface for intitialization

function   [ok]=compile_init_modelica(model_name,paremb,jaco)

    if exists("%scicos_solver")==0 then
        %scicos_solver = 0 ;
    end

    if ~exists("%scicos_debug_gr") then
        %scicos_debug_gr = %f; //** debug mode : default is "%f"
    end


    MODELICAC_FILENAME = "omc";
    if getos() == "Windows" then
        MODELICAC_FILENAME = MODELICAC_FILENAME + ".exe";
    end

    // called by Initilization IHM
    lines(0);
    global icpr;

    //set paths for generated files
    outpath = pathconvert(TMPDIR,%t,%t);

    model_name = basename(filemo);
    model_name_flat = model_name + "f";

    //Flat modelica file generated by translator
    model_flat_file = outpath + model_name_flat + ".mo";// flat modelica file path
    
    //files/folders generated by modelica compiler
    model_desc_file = outpath + model_name + "/modelDescription.xml";
    model_C_file = outpath + model_name + ".c"

    //## generation of the txt for the main modelica file
    //## plus return ipar/rpar for the model of THE modelica block
    [txt,rpar,ipar]=create_modelica(bllst,corinv,connectmat,NvM,model_name,scs_m);
    
    //## write txt in the file path+name+'.mo'
    path=pathconvert(stripblanks(path),%t,%t)
    mputl(txt,path+name+".mo");
    mprintf("%s\n",["--------------------------------------------\";
    msprintf(_(" Main Modelica : %s"),path+name+".mo")
    ""])

    //## search for

    Mblocks = [];
    for i=1:lstsize(bllst)
        if type(bllst(i).sim)==15 then
            if bllst(i).sim(2)==30004 then
                o = scs_m(scs_full_path(corinv(i)))
                Mblocks=[Mblocks;
                o.graphics.exprs.nameF]
            end
        end
    end
    
    [ok]=translator(filemo,Mblocks,model_flat_file)
    if ~ok then  dep_u=%t; return,end
    
    //Generate the C file with modelicac
    //---------------------------------------------------------------------
    Jacobian = (jaco <> "0");
    ok=modelicac(model_flat_file,%Jacobian,running=="1",model_C_file,model_desc_file)
    if ~ok then return,end
    mprintf(" Simulation C code :%s\n", model_C_file);
    
    // Read XML file data into a tree-like native data structure
    [name,guid,nipar,nrpar,nopar,nz,nx,nx_der,nx_ns,nin,nout,nm,ng,dep_u]=reading_incidence(model_desc_file);
    
    //compile and link the generated C file
    ok=Link_modelica_C(model_C_file)
    if ~ok then return,end

    //build model data structure of the block equivalent to the implicit
    bllst = bllst;
    nblock = length(bllst);
    mdl = bllst(nblock);
    mdl.sim = list(name, 10004);
    mdl.label = name;
    mdl.uid = guid;
    mdl.state = zeros(nx * 2, 1);
    mdl.dstate = zeros(nz, 1);
    mdl.nzcross = ng;
    mdl.nmode = nm;
    mdl.in = ones(nin, 1);
    mdl.out = ones(nout, 1);
    mdl.dep_ut = [dep_u, %t];
    bllst(nblock) = mdl;
    if size(connectmat, 2) == 6 then
        connectmat = connectmat(:,[1 2 4 5]);
    end
    scs_m = null();

    icpr = list();
    if exists(%scicos_solver) == 0 | (exists(%scicos_solver) <> 0 & %scicos_solver < 100) then
        %scicos_solver = 100;
    end
    icpr = c_pass2(bllst, connectmat, clkconnect, cor, corinv);

    if icpr == list() then
        ok = %f;
        return,
    end

    // suppressing display blocks
    Ignore=["bouncexy", "cscope", "cmscope", "canimxy", "canimxy3d", "cevscpe", "cfscope", "cscopexy", ..
    "cscopexy3d", "cscopxy", "cscopxy3d", "cmatview", "cmat3d", "affich", "affich2", "BPLATFORM"];

    for i = 1:length(icpr.sim.funs)
        if type(icpr.sim.funs(i)) <> 13 then
            if find(icpr.sim.funs(i)(1) == Ignore) <> [] then
                icpr.sim.funs(i)(1) = "trash";
            end
        end
    end
endfunction
//-----------------------------------------------------------------------------

