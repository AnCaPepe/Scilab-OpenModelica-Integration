//  Scicos
//
//  Copyright (C) INRIA - METALAU Project <scicos@inria.fr>
//                      - Serge Steer <serge.steer@inria.fr> - 2003
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// See the file ../license.txt
//

function [ok,name,guid,nipar,nrpar,nopar,nz,nx,nx_der,nx_ns,nin,nout,nm,ng,dep_u]=compile_modelica(filemo,Mblocks)

    // Copyright INRIA
    // Modelica_Init becomes true only in "Modelicainitialize_.sci"
    if exists("%Modelica_Init")==0 then %Modelica_Init=%f; end
    if exists("%Jacobian")==0 then %Jacobian=%t; end
    if exists("%Modelica_ParEmb")==0 then %Modelica_ParEmb=%t; end

    //Initialize lhs arguments in case of return on error
    name=""; guid="";
    dep_u=%t; nipar=0; nrpar=0; nopar=0;
    nz=0; nx=0; nx_der=0; nx_ns=0; nin=0; nout=0; nm=0; ng=0;

    //set paths for generated files
    outpath = pathconvert(TMPDIR,%t,%t);

    // Base and flat model name
    model_name = basename(filemo);
    model_name_flat = model_name + "f";

    //Flat modelica file generated by translator
    model_flat_file = outpath + model_name_flat + ".mo";// flat modelica file path
    
    //files/folders generated by modelica compiler
    model_desc_file = outpath + model_name + "/modelDescription.xml";
    model_C_file = outpath + model_name + ".c"

    //do not update C code if not required this allows C code
    //modifications for debugging purposes
    updateC=needcompile<>0|fileinfo(model_C_file)==[]| %Modelica_Init

    if updateC  then

        //Generate the flat model if it does not exist yet (It may have been
        //generated by the initialization GUI
        overwrite=%t;  //Yes
        if ( %Modelica_Init ) then
            if (fileinfo(model_flat_file) <> []) then
                overwrite=messagebox([_("The initialization file already exists!");
                _("Do you want to overwrite it?") ],..
                "","question",[_("Yes"),_("No")],"modal")==1
            end
        end

        if overwrite then
            // generate with filemo the Modelica flat model,the xml files,
            //  and files needed for the scicos simulation
            ok = translator(filemo,Mblocks,model_flat_file)
            if ~ok then  dep_u=%t; return,end
        end

        // if the initialisation GUI is used
        if (%Modelica_Init) then //---------------------------
            name=model_flat_file;
            //<<ALERT dep_u of the initialization block is obtained only when the  C
            // code is generated.
            dep_u=%t;
            ok=%t,
            return;
        end
        
        //Generate the C file with modelicac
        //---------------------------------------------------------------------
        ok = omcompiler(model_flat_file,%Jacobian,model_C_file,model_desc_file);
        if ~ok then return,end
        //---------------------------------------------------------------------
    end // if update

    // Read XML file data into a tree-like native data structure
    [name,guid,nipar,nrpar,nopar,nz,nx,nx_der,nx_ns,nin,nout,nm,ng,dep_u] = reading_incidence(model_desc_file);
    
    depu(dep_u)="T"; depu(~dep_u)="F"; depu=strcat(depu);
    
    txt = [_("Modelica blocks are reduced to a block with:");
    msprintf(_("Number of differential states: %d"),nx_der);
    msprintf(_("Number of algebraic states: %d"),nx-nx_der);
    msprintf(_("Number of discrete time states  : %d"),nz);
    msprintf(_("Number of zero-crossing surfaces: %d"),ng);
    msprintf(_("Number of modes  : %d"),nm);
    msprintf(_("Number of inputs : %d"),nin);
    msprintf(_("Number of outputs: %d"),nout);
    msprintf(_("Input/output dependency:[%s]"),depu)
    msprintf(_("Analytical Jacobian: enabled  (%%Jacobian=%s)"),sci2exp(%Jacobian));
    msprintf(_("Parameter embedding mode: enabled (%%Modelica_ParEmb=%s)"),sci2exp(%Modelica_ParEmb))
    ""
    msprintf(_("Generated files path: %s"),outpath)
    ""];

    if getscilabmode() <> "NWNI" then
        messagebox(txt, "info");
    else
        disp(txt);
    end

    //compile and link the generated C file
    ok=Link_modelica_C(model_C_file);
    
endfunction
